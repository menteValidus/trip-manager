//
//  ManageRouteMapViewControllerTests.swift
//  Tripper
//
//  Created by Denis Cherniy on 14.05.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Tripper
import XCTest
import CoreLocation

class ManageRouteMapViewControllerTests: XCTestCase {
    // MARK: Subject Under Test
    
    var sut: ManageRouteMapViewController!
    var window: UIWindow!
    var routePointGateway: RoutePointGateway!
    var routeFragmentGateway: RouteFragmentGateway!
    
    // MARK: Test Lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupManageRouteMapViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test Setup
    
    func setupManageRouteMapViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ManageRouteMapViewController") as? ManageRouteMapViewController
        let navigationController = UINavigationController()
        navigationController.addChild(sut)
    }
    
    func setupEmptyGateways() {
        routePointGateway = RoutePointGatewayMock(initialStorage: [])
        routeFragmentGateway = RouteFragmentGatewayMock(initialStorage: [])
    }
    
    func setupGateways() {
        let startRoutePoint = RoutePoint(id: "11", orderNumber: 1, title: "Stub #1", subtitle: "S(t)ubtitle", latitude: 0, longitude: 0, arrivalDate: Date(), departureDate: Date())
        let date = Date().addingTimeInterval(TimeInterval(120))
        let endRoutePoint = RoutePoint(id: "22", orderNumber: 2, title: "Stub #2", subtitle: "S(t)ubtitle", latitude: 1, longitude: 1, arrivalDate: date, departureDate: date)
        routePointGateway = RoutePointGatewayMock(initialStorage: [startRoutePoint, endRoutePoint])
        
        let firstCoord = CLLocationCoordinate2D(latitude: startRoutePoint.latitude, longitude: startRoutePoint.longitude)
        let secondCoord = CLLocationCoordinate2D(latitude: endRoutePoint.latitude, longitude: endRoutePoint.longitude)
        let routeFragment = ConcreteRouteFragment(startPointID: startRoutePoint.id, endPointID: endRoutePoint.id, coordinates: [firstCoord, secondCoord], travelTimeInSeconds: 60, travelDistanceInMeters: 60)
        routeFragmentGateway = RouteFragmentGatewayMock(initialStorage: [routeFragment])
    }
    
    func standardSetup() {
        let interactor = ManageRouteMapInteractor()
        let presenter = ManageRouteMapPresenter()
        
        presenter.viewController = sut
        interactor.presenter = presenter
        
        interactor.worker = ManageRouteMapWorker(routePointGateway: routePointGateway, routeFragmentGateway: routeFragmentGateway)
        sut.interactor = interactor
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Tests
    
    func testFetchDifferenceWithEmptyDB() {
        setupEmptyGateways()
        standardSetup()
        
        loadView()
        sut.fetchDifference()
        
        XCTAssertTrue(sut.mapView.annotations == nil)
    }
    
    func testFetchDifferenceWithFilledDB() {
        setupGateways()
        standardSetup()
        
        loadView()
        sut.fetchDifference()
        
        XCTAssertTrue(sut.mapView.annotations!.count > 0)
    }
    
    func testSetAnnotation() {
        setupEmptyGateways()
        standardSetup()
        let annotationInfo = RoutePoint(id: "11", orderNumber: 1, title: "Stub #1", subtitle: "S(t)ubtitle", latitude: 0, longitude: 0, arrivalDate: Date(), departureDate: Date())
        
        loadView()
        sut.interactor?.setRoutePoint(request: .init(annotationInfo: annotationInfo))
        
        XCTAssertTrue(sut.mapView.annotations!.count == 1)
    }
    
    func testSelectAnnotation() {
        setupGateways()
        standardSetup()
        
        loadView()
        sut.fetchDifference()
        sut.mapView.selectAnnotation(sut.annotationsID.first!.key, animated: false, completionHandler: nil)
        
        XCTAssertTrue(!sut.mapView.selectedAnnotations.isEmpty)
    }
    
    func testPopup() {
        setupGateways()
        standardSetup()
        let selectedAnnotationID = routePointGateway.fetchAll().first?.id
        
        loadView()
        sut.interactor?.selectAnnotation(request: .init(identifier: selectedAnnotationID))
        
        XCTAssertTrue(sut.detailsPopup != nil)
    }
    
    func testDeselectAnnotation() {
        setupGateways()
        standardSetup()
        
        loadView()
        sut.fetchDifference()
        sut.mapView.selectAnnotation(sut.annotationsID.first!.key, animated: false, completionHandler: nil)
        sut.interactor?.deselectAnnotation(request: .init())
        
        XCTAssertTrue(sut.mapView.selectedAnnotations.isEmpty)
    }
}
