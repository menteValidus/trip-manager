//
//  DetailRoutePointPresenter.swift
//  Tripper
//
//  Created by Denis Cherniy on 09.04.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailRoutePointPresentationLogic {
    func presentSetupUI(response: DetailRoutePoint.SetupUI.Response)
    func presentDismiss(response: DetailRoutePoint.Dismiss.Response)
    func presentEdit(response: DetailRoutePoint.Edit.Response)
    func presentDelete(response: DetailRoutePoint.Delete.Response)
    func presentToggleView(response: DetailRoutePoint.ToggleView.Response)
}

class DetailRoutePointPresenter: DetailRoutePointPresentationLogic {
    weak var viewController: DetailRoutePointDisplayLogic?
    
    private var dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.timeStyle = .none
        dateFormatter.dateStyle = .medium
        return dateFormatter
    }()
    
    // MARK: - Setup UI
    
    func presentSetupUI(response: DetailRoutePoint.SetupUI.Response) {
        let arrivalDate = dateFormatter.string(from: response.arrivalDate)
        let departureDate = dateFormatter.string(from: response.departureDate)
        let viewModel = DetailRoutePoint.SetupUI.ViewModel(
            title: response.title, description: response.description,
            arrivalDateText: arrivalDate, departureDateText: departureDate)
        viewController?.displaySetupUI(viewModel: viewModel)
    }
    
    // MARK: Dismiss
    
    func presentDismiss(response: DetailRoutePoint.Dismiss.Response) {
        let viewModel = DetailRoutePoint.Dismiss.ViewModel()
        viewController?.displayDismiss(viewModel: viewModel)
    }
    
    // MARK: Edit
    
    func presentEdit(response: DetailRoutePoint.Edit.Response) {
        let viewModel = DetailRoutePoint.Edit.ViewModel()
        viewController?.displayEdit(viewModel: viewModel)
    }
    
    // MARK: Delete
    
    func presentDelete(response: DetailRoutePoint.Delete.Response) {
        let viewModel = DetailRoutePoint.Delete.ViewModel()
        viewController?.displayDelete(viewModel: viewModel)
    }
    
    // MARK: Toggle View
    
    func presentToggleView(response: DetailRoutePoint.ToggleView.Response) {
        let screenCoverage = CGFloat(response.screenCoverage)
        let viewModel = DetailRoutePoint.ToggleView.ViewModel(screenCoverage: screenCoverage)
        viewController?.displayToggleView(viewModel: viewModel)
    }
}
