//
//  DetailRoutePointViewController.swift
//  Tripper
//
//  Created by Denis Cherniy on 09.04.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailRoutePointDisplayLogic: class {
    func displaySetupUI(viewModel: DetailRoutePoint.SetupUI.ViewModel)
    func displayDismiss(viewModel: DetailRoutePoint.Dismiss.ViewModel)
    func displayEditRoutePoint(viewModel: DetailRoutePoint.EditRoutePoint.ViewModel)
    func displayDeleteRoutePoint(viewModel: DetailRoutePoint.DeleteRoutePoint.ViewModel)
}

typealias Popup = DismissablePopup & ChangeablePopup

protocol DismissablePopup: class {
    func dismissPopup()
}

protocol ChangeablePopup: class {
    func updateUI()
}


class DetailRoutePointViewController: UIViewController, DetailRoutePointDisplayLogic {
    var interactor: DetailRoutePointBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutePointRoutingLogic & DetailRoutePointDataPassing)?
    
    private var panGestureRecognizer: UIPanGestureRecognizer?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailRoutePointInteractor()
        let presenter = DetailRoutePointPresenter()
        let router = DetailRoutePointRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // TODO: GestureRecognizer doesn't call dedicated event.
        initGestureRecognizers()
        self.view.layer.cornerRadius = 32
        setupUI()
    }
    
    private func initGestureRecognizers() {
        panGestureRecognizer = UIPanGestureRecognizer(target: self, action: #selector(DetailRoutePointViewController.onPan(recognizer:)))
        view.addGestureRecognizer(panGestureRecognizer!)
    }
    
    // MARK: - Setup UI
    
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var descriptionTextView: UITextView!
    @IBOutlet weak var arrivalDateLabel: UILabel!
    @IBOutlet weak var departureDateLabel: UILabel!
    
    func setupUI() {
        updateUI()
    }
    
    func displaySetupUI(viewModel: DetailRoutePoint.SetupUI.ViewModel) {
        titleLabel.text = viewModel.title
        descriptionTextView.text = viewModel.description
        arrivalDateLabel.text = viewModel.arrivalDateText
        departureDateLabel.text = viewModel.departureDateText
    }
    
    // MARK: Dismiss
    
    func displayDismiss(viewModel: DetailRoutePoint.Dismiss.ViewModel) {
        router?.routeToManageRouteMap(segue: nil)
    }
    
    // MARK: Edit Route Point
    
    @IBAction func editRoutePoint() {
        let request = DetailRoutePoint.EditRoutePoint.Request()
        interactor?.editRoutePoint(request: request)
    }
    
    func displayEditRoutePoint(viewModel: DetailRoutePoint.EditRoutePoint.ViewModel) {
        print("Use case EditRoutePoint is completed")
    }
    // MARK: Delete Route Point
    
    @IBAction func deleteRoutePoint() {
        let request = DetailRoutePoint.DeleteRoutePoint.Request()
        interactor?.deleteRoutePoint(request: request)
    }
    
    func displayDeleteRoutePoint(viewModel: DetailRoutePoint.DeleteRoutePoint.ViewModel) {
        print("Use case DeleteRoutePoint is completed")
    }
    
    
    // MARK: - Gesture Actions
    
    // TODO: MOVE TO INTERACTOR.
    @objc func onPan(recognizer: UIPanGestureRecognizer) {
        switch recognizer.state {
        case .changed:
            let translation = recognizer.translation(in: self.view)
            let y = view.frame.minY
            if let superViewHeight = self.view.superview?.frame.height {
                if !(superViewHeight - view.frame.height > y + translation.y) {
                    self.view.frame = CGRect(x: 0, y: y + translation.y, width: view.frame.width, height: view.frame.height)
                }
            }
            recognizer.setTranslation(.zero, in: self.view)
            
        case .cancelled, .ended:
            let positionFromTheTop = view.frame.origin.y
            let maxDistanceToPan = view.frame.height
            
            if positionFromTheTop < maxDistanceToPan * 1 / 3 {
                toggleView(screenCoverage: 0.75)
            } else if positionFromTheTop < maxDistanceToPan * 2 / 3 {
                toggleView(screenCoverage: 0.25)
            } else {
                if positionFromTheTop < maxDistanceToPan * 0.95 {
                    toggleView(screenCoverage: 0.25)
                } else {
                    dismissPopup()
                }
            }
            
        default:
            return
        }
    }
    
    // TODO: MOVE TO PRESENTER.
    func toggleView(screenCoverage percent: CGFloat) {
        UIView.animate(withDuration: 0.3) {
            let height = self.view.frame.height
            let width  = self.view.frame.width
            let yCoordinate = self.view.frame.height * (1 - percent)
            print(Float(yCoordinate))
            self.view.frame = CGRect(x: 0, y: yCoordinate, width: width, height: height)
        }
    }
}

extension DetailRoutePointViewController: DismissablePopup {
    // MARK: - Dismissable Popup
    
    func dismissPopup() {
        let request = DetailRoutePoint.Dismiss.Request()
        interactor?.dismiss(request: request)
    }
}

extension DetailRoutePointViewController: ChangeablePopup {
    // MARK: - Changeable Popup
    
    func updateUI() {
        let request = DetailRoutePoint.SetupUI.Request()
        interactor?.setupUI(request: request)
    }
}
