//
//  DetailRoutePointInteractor.swift
//  Tripper
//
//  Created by Denis Cherniy on 09.04.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailRoutePointBusinessLogic {
    func setupUI(request: DetailRoutePoint.SetupUI.Request)
    func dismiss(request: DetailRoutePoint.Dismiss.Request)
    func editRoutePoint(request: DetailRoutePoint.EditRoutePoint.Request)
    func deleteRoutePoint(request: DetailRoutePoint.DeleteRoutePoint.Request)
    func toggleView(request: DetailRoutePoint.ToggleView.Request)
}

protocol DetailRoutePointDataStore {
    var routePoint: RoutePoint? { get set }
}

class DetailRoutePointInteractor: DetailRoutePointBusinessLogic, DetailRoutePointDataStore {
    var presenter: DetailRoutePointPresentationLogic?
    var worker: DetailRoutePointWorker?
    var routePoint: RoutePoint?
    
    // MARK: - Setup UI
    
    func setupUI(request: DetailRoutePoint.SetupUI.Request) {
        if let routePoint = routePoint {
            let response = DetailRoutePoint.SetupUI.Response(
                title: routePoint.title, description: routePoint.subtitle,
                arrivalDate: routePoint.arrivalDate ?? Date(), departureDate: routePoint.departureDate ?? Date())
            
            presenter?.presentSetupUI(response: response)
        }
    }
    
    // MARK: Dismiss
    
    func dismiss(request: DetailRoutePoint.Dismiss.Request) {
        let response = DetailRoutePoint.Dismiss.Response()
        presenter?.presentDismiss(response: response)
    }
    
    // MARK: Edit Route Point
    
    func editRoutePoint(request: DetailRoutePoint.EditRoutePoint.Request) {
        let response = DetailRoutePoint.EditRoutePoint.Response()
        presenter?.presentEditRoutePoint(response: response)
    }
    
    // MARK: Delete Route Point
    
    func deleteRoutePoint(request: DetailRoutePoint.DeleteRoutePoint.Request) {
        let response = DetailRoutePoint.DeleteRoutePoint.Response()
        presenter?.presentDeleteRoutePoint(response: response)
    }
    
    // MARK: Toggle View
    
    func toggleView(request: DetailRoutePoint.ToggleView.Request) {
        let positionFromTheTop = request.positionFromTheTop
        let maxDistanceToPan = request.maxDistanceToPan
        let response: DetailRoutePoint.ToggleView.Response
        
        if positionFromTheTop < maxDistanceToPan * 1 / 3 {
            response = DetailRoutePoint.ToggleView.Response(screenCoverage: 0.75)
        } else if positionFromTheTop < maxDistanceToPan * 2 / 3 {
            response = DetailRoutePoint.ToggleView.Response(screenCoverage: 0.25)
        } else {
            if positionFromTheTop < maxDistanceToPan * 0.95 {
                response = DetailRoutePoint.ToggleView.Response(screenCoverage: 0.25)
            } else {
                response = DetailRoutePoint.ToggleView.Response(screenCoverage: 0)
            }
        }
        
        presenter?.presentToggleView(response: response)
    }
}
