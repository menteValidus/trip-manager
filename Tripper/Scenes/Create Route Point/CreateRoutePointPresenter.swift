//
//  CreateRoutePointPresenter.swift
//  Tripper
//
//  Created by Denis Cherniy on 07.04.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateRoutePointPresentationLogic {
    func presentFormRoutePoint(response: CreateRoutePoint.FormRoutePoint.Response)
    func presentFetchDateLimits(response: CreateRoutePoint.FetchDateLimits.Response)
    func presentSaveRoutePoint(response: CreateRoutePoint.SaveRoutePoint.Response)
    func presentCancelCreation(response: CreateRoutePoint.CancelCreation.Response)
    func presentSetDate(response: CreateRoutePoint.SetDate.Response)
    func presentToggleDateEditState(response: CreateRoutePoint.ToggleDateEditState.Response)
    func presentShowDatePicker(response: CreateRoutePoint.ShowDatePicker.Response)
    func presentHideDatePicker(response: CreateRoutePoint.HideDatePicker.Response)
}

class CreateRoutePointPresenter: CreateRoutePointPresentationLogic {
    weak var viewController: CreateRoutePointDisplayLogic?
    
    private let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.timeStyle = .short
        dateFormatter.dateStyle = .medium
        return dateFormatter
    }()
    
    // MARK: - Form Route Point
    
    func presentFormRoutePoint(response: CreateRoutePoint.FormRoutePoint.Response) {
        let navigationTitle = response.navigationTitle
        
        let title = response.routePoint.title
        let subtitle = response.routePoint.subtitle
        
        let arrivalDate = response.routePoint.arrivalDate
        let arrivalDateString = dateFormatter.string(from: arrivalDate)
        
        let departureDate = response.routePoint.departureDate
        let departureDateString = dateFormatter.string(from: departureDate)
        
        let annotationForm = CreateRoutePoint.DisplayableAnnotationInfo(
            title: title, subtitle: subtitle, arrivalDate: arrivalDateString, departureDate: departureDateString)
        
        let viewModel = CreateRoutePoint.FormRoutePoint.ViewModel(navigationTitle: navigationTitle, annotationForm: annotationForm)
        viewController?.displayRoutePointForm(viewModel: viewModel)
    }
    
    // MARK: Fetch Date Limits
    
    func presentFetchDateLimits(response: CreateRoutePoint.FetchDateLimits.Response) {
        let viewModel = CreateRoutePoint.FetchDateLimits.ViewModel()
        viewController?.displayFetchDateLimits(viewModel: viewModel)
    }
    
    // MARK: Save Route Point
    
    func presentSaveRoutePoint(response: CreateRoutePoint.SaveRoutePoint.Response) {
        let viewModel = CreateRoutePoint.SaveRoutePoint.ViewModel()
        viewController?.displaySaveRoutePoint(viewModel: viewModel)
    }
    
    // MARK: Cancel Creation
    
    func presentCancelCreation(response: CreateRoutePoint.CancelCreation.Response) {
        let viewModel = CreateRoutePoint.CancelCreation.ViewModel()
        viewController?.displayCancelCreation(viewModel: viewModel)
    }
    
    // MARK: Set Date
    
    func presentSetDate(response: CreateRoutePoint.SetDate.Response) {
        let date = response.newDate
        let dateString = dateFormatter.string(from: date)
        
        let viewModel = CreateRoutePoint.SetDate.ViewModel(date: date, dateString: dateString, state: response.state)
        viewController?.displaySetDate(viewModel: viewModel)
    }
    
    // MARK: Toggle Date Edit State
    
    func presentToggleDateEditState(response: CreateRoutePoint.ToggleDateEditState.Response) {
        let viewModel = CreateRoutePoint.ToggleDateEditState.ViewModel(oldState: response.oldState, newState: response.newState)
        viewController?.displayToggleDateEditState(viewModel: viewModel)
    }
    
    // MARK: Show Date Picker
    
    func presentShowDatePicker(response: CreateRoutePoint.ShowDatePicker.Response) {
        let viewModel = CreateRoutePoint.ShowDatePicker.ViewModel(state: response.state, date: response.date)
        viewController?.displayShowDatePicker(viewModel: viewModel)
    }
    
    // MARK: Hide Date Picker
    
    func presentHideDatePicker(response: CreateRoutePoint.HideDatePicker.Response) {
        let viewModel = CreateRoutePoint.HideDatePicker.ViewModel(state: response.state)
        viewController?.displayHideDatePicker(viewModel: viewModel)
    }
}
