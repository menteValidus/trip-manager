//
//  ManageRouteMapPresenter.swift
//  Tripper
//
//  Created by Denis Cherniy on 07.04.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ManageRouteMapPresentationLogic {
    func presentFetchNewAnnotationsInfo(response: ManageRouteMap.FetchNewAnnotationsInfo.Response)
    func presentAnnotationCreation(response: ManageRouteMap.CreateRoutePoint.Response)
    func presentSetRoutePoint(response: ManageRouteMap.SetRoutePoint.Response)
    func presentSelectAnnotation(response: ManageRouteMap.SelectAnnotation.Response)
    func presentDeselectAnnotation(response: ManageRouteMap.DeselectAnnotation.Response)
    func presentShowDetail(response: ManageRouteMap.ShowDetail.Response)
    func presentEditRoutePoint(response: ManageRouteMap.EditRoutePoint.Response)
    func presentDeleteRoutePoint(response: ManageRouteMap.DeleteRoutePoint.Response)
}

class ManageRouteMapPresenter: ManageRouteMapPresentationLogic {
    weak var viewController: ManageRouteMapDisplayLogic?
    
    // MARK: Annotation Creation
    
    func presentAnnotationCreation(response: ManageRouteMap.CreateRoutePoint.Response) {
        let viewModel = ManageRouteMap.CreateRoutePoint.ViewModel()
        viewController?.displayCreateRoutePoint(viewModel: viewModel)
    }
    
    // MARK: Set Route Point
    
    func presentSetRoutePoint(response: ManageRouteMap.SetRoutePoint.Response) {
        let viewModel = ManageRouteMap.SetRoutePoint.ViewModel(annotationInfo: response.annotationInfo)
        viewController?.displaySetRoutePoint(viewModel: viewModel)
    }
    
    // MARK: Fetch New Annotations Info
    
    func presentFetchNewAnnotationsInfo(response: ManageRouteMap.FetchNewAnnotationsInfo.Response) {
        let viewModel = ManageRouteMap.FetchNewAnnotationsInfo.ViewModel(annotationsInfo: response.annotationsInfo)
        viewController?.displayFetchNewAnnotationsInfo(viewModel: viewModel)
    }
    
    // MARK: Select Annotation
    
    func presentSelectAnnotation(response: ManageRouteMap.SelectAnnotation.Response) {
        let viewModel = ManageRouteMap.SelectAnnotation.ViewModel(identifier: response.identifier)
        viewController?.displaySelectAnnotation(viewModel: viewModel)
    }
    
    // MARK: Deselect Annotation
    
    func presentDeselectAnnotation(response: ManageRouteMap.DeselectAnnotation.Response) {
        let viewModel = ManageRouteMap.DeselectAnnotation.ViewModel()
        viewController?.displayDeselectAnnotation(viewModel: viewModel)
    }
    
    // MARK: Show Detail
    
    func presentShowDetail(response: ManageRouteMap.ShowDetail.Response) {
        let viewModel = ManageRouteMap.ShowDetail.ViewModel()
        viewController?.displayShowDetail(viewModel: viewModel)
    }
    
    // MARK: Edit Route Point
    
    func presentEditRoutePoint(response: ManageRouteMap.EditRoutePoint.Response) {
        let viewModel = ManageRouteMap.EditRoutePoint.ViewModel()
        viewController?.displayEditRoutePoint(viewModel: viewModel)
    }
    
    // MARK: Delete Route Point
    
    func presentDeleteRoutePoint(response: ManageRouteMap.DeleteRoutePoint.Response) {
        let viewModel = ManageRouteMap.DeleteRoutePoint.ViewModel(identifier: response.identifier)
        viewController?.displayDeleteRoutePoint(viewModel: viewModel)
    }
}
