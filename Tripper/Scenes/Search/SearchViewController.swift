//
//  SearchViewController.swift
//  Tripper
//
//  Created by Denis Cherniy on 16.06.2020.
//  Copyright (c) 2020 Denis Cherniy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Swinject

protocol SearchDisplayLogic: class {
    func displayPerformedSearch(viewModel: Search.PerformSearch.ViewModel)
    func displayEntrySelection(viewModel: Search.SelectEntry.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    var delegate: HasFocusableMap?
    
    // MARK: Object Lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        let worker = SearchWorker(searchApiGateway: Container.shared.resolve(SearchApiGateway.self)!)
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureDelegates()
    }
    
    // MARK: Search
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var tableView: UITableView!
    
    var points: [String] = []
    
    @IBAction func searchTextFieldEditingDidChanged(_ sender: Any) {
        performSearch()
    }
    
    func performSearch() {
        interactor?.performSearch(request: .init(query: searchTextField.text!))
    }
    
    func displayPerformedSearch(viewModel: Search.PerformSearch.ViewModel) {
        points = viewModel.points
        tableView.reloadData()
    }
    
    // MARK: Select Entry
    
    func selectEntry(_ entryNumber: Int) {
        interactor?.selectEntry(request: .init(entryNumber: entryNumber))
    }
    
    func displayEntrySelection(viewModel: Search.SelectEntry.ViewModel) {
        delegate?.focusableMap(didSelected: [viewModel.southWestCoordinate, viewModel.northSouthCoordinate])
    }
}

extension SearchViewController {
    func configureDelegates() {
        tableView.dataSource = self
        tableView.delegate = self
    }
}

extension SearchViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return points.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        
        cell.textLabel?.text = points[indexPath.row]
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        dismiss(animated: true) {
            self.selectEntry(indexPath.row)
        }
    }
    
}
